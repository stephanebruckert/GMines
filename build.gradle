buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.3.7'
        classpath "com.craigburke:js-closure-wrap-asset-pipeline:1.1.0"
        classpath "com.craigburke.angular:angular-template-asset-pipeline:2.2.0"
        classpath "com.craigburke.angular:angular-annotate-asset-pipeline:2.1.0"
    }
}

plugins {
    id "io.spring.dependency-management" version "0.5.1.RELEASE"
    id "com.moowork.node" version "0.10"
}

version "0.1"
group "gmines"

apply plugin: "spring-boot"
apply plugin: "war"
apply plugin: "asset-pipeline"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: 'com.moowork.node'

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
    jasmineDependencies = ['karma', 'karma-jasmine@2_0', 'karma-phantomjs-launcher', 'phantomjs']
    bowerInstallerExec = file('node_modules/bower-installer/bower-installer')
    bowerExec = file('node_modules/bower-installer/node_modules/bower/bin/bower')
    assetLibsDir = file('grails-app/assets/libs/bower_components')
}

assets {
    minifyJs = true
    minifyCss = true
    configOptions = [
        angular : [
            moduleNameBase: 'gmines',
            includePathInName: true
        ]
    ]
}

node {
    version = '0.12.5'
    npmVersion = '2.6.0'
    distBaseUrl = 'http://nodejs.org/dist'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    nodeModulesDir = file("${project.projectDir}")
}

task installBowerInstaller(type: NpmTask) {
    args = ['install', 'bower-installer', '--silent']
    outputs.dir 'node_modules/bower-installer'
}

task installAssetLibs(type: NodeTask, dependsOn: installBowerInstaller) {
    script = bowerInstallerExec
    inputs.file 'bower.json'
    outputs.dir assetLibsDir
}

task installJasmine(type: NpmTask) {
    outputs.dir node.nodeModulesDir
    args = ['install'] + jasmineDependencies + ['--silent']
}

task cleanBowerCache(type: NodeTask, dependsOn: installBowerInstaller) {
    script = bowerExec
    args = ['cache', 'clean']
}

clean {
    delete 'node_modules'
    delete 'bower_components'
    delete assetLibsDir
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"

    compile "org.grails.plugins:hibernate"
    compile "org.grails.plugins:cache"
    compile "org.hibernate:hibernate-ehcache"

    runtime "org.grails.plugins:asset-pipeline"
    runtime "com.craigburke.angular:angular-template-asset-pipeline:2.2.0"
    runtime "com.craigburke.angular:angular-annotate-asset-pipeline:2.1.0"
    runtime "com.craigburke:js-closure-wrap-asset-pipeline:1.1.0"

    runtime "org.grails.plugins:scaffolding"

    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"

    // Note: It is recommended to update to a more robust driver (Chrome, Firefox etc.)
    testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.44.0'

    console "org.grails:grails-console"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

task stage() {
    dependsOn clean, war
}

tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.war")
}

war.mustRunAfter clean
